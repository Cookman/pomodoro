<?xml version="1.0"?>
<!--
  Created by Cookman on 03.12.2014.
-->
<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx" resizable="false"
          width="265" height="200" showStatusBar="false" isPopUp="true" alwaysInFront="true"
          title="{resourceManager.getString('resources', 'SETTINGS')}"
          maximizable="false"
          minimizable="false" type="{NativeWindowType.UTILITY}"
          creationComplete="creationCompleteHandler(event)" close="closeHandler(event)">
    <fx:Script><![CDATA[
        import models.LocalStorage;
        import models.MindTimerModel;
        import models.SoundModel;

        import mx.collections.ArrayCollection;
        import mx.events.ListEvent;

        import views.renderer.CustomListItemEditor;

        import vo.SettingsVO;

        private var settings:SettingsVO;
        private var model:MindTimerModel = MindTimerModel.getInstance();

        protected function creationCompleteHandler(event:Event):void {
            settings = model.settings;
            if (settings) {
                usePomLength.selected = settings.useFixedPomodoroLength;
                countPoms.selected = settings.showPomodoroStatistic;
                pomodoroLength.text = settings.pomodoroLength.toString();
                template1.text = settings.templates[0];
                template2.text = settings.templates[1];
                template3.text = settings.templates[2];
                template4.text = settings.templates[3];
                useRecommendsCheckBox.selected = settings.useRecommends;
                cycleRecommendsCheckBox.selected = settings.cycleRecommends;
                timeRecommendList.dataProvider = new ArrayCollection(settings.recommends);

                for each(var item:Object in languageBox.dataProvider) {
                    if (item.value == settings.language) {
                        languageBox.selectedItem = item;
                    }
                }
                resetCheckBox.selected = settings.resetDay;
                useMp3CheckBox.selected = settings.useMp3;
                if (settings.useMp3) {
                    fileBrowseButton.label = settings.soundFileName;
                }
                model.activateResetDay();
            }
        }

        protected function okHandler(event:Event):void {
            if (settings) {
                settings.useFixedPomodoroLength = usePomLength.selected;
                settings.pomodoroLength = parseInt(pomodoroLength.text);
                settings.showPomodoroStatistic = countPoms.selected;
                settings.templates[0] = template1.text;
                settings.templates[1] = template2.text;
                settings.templates[2] = template3.text;
                settings.templates[3] = template4.text;
                settings.useRecommends = useRecommendsCheckBox.selected;
                settings.cycleRecommends = cycleRecommendsCheckBox.selected;
                settings.recommends = getRecommendProvider();
                settings.language = languageBox.selectedItem.value;
                settings.resetDay = resetCheckBox.selected;
                settings.useMp3 = useMp3CheckBox.selected;
                if (useMp3CheckBox.selected) {
                    try {
                        if (loadedFile) {
                            settings.soundFileName = loadedFile.name;
                        }
                    }
                    catch (e:Error) {
                    }
                }
                LocalStorage.saveSettings(settings);
                model.loadSettings();
                model.trayIt.setPomodoroStatistic(model.showPomodoroStatistic);
                model.trayIt.show();
                model.trayIt.settingsShown = false;
                this.close();
            }
        }

        private function getRecommendProvider():Array {
            var result:Array = [];
            for each(var item:Object in timeRecommendList.dataProvider) {
                if (item != "0") {
                    result.push(item);
                }
            }
            return result;
        }

        protected function cancelHandler(event:Event):void {
            model.doLocalization(settings.language)
            model.trayIt.show();
            model.trayIt.settingsShown = false;
            model.trayIt.setPomodoroStatistic(model.showPomodoroStatistic);
            this.close();
        }

        protected function addTime(event:Event):void {
            timeRecommendList.dataProvider.addItem({value: "0"})
        }

        private function editEndHandler(event:ListEvent):void {
            event.preventDefault();
            event.stopImmediatePropagation();
            timeRecommendList.editedItemRenderer.data.value = CustomListItemEditor(event.currentTarget.itemEditorInstance).valueInput.text;
            timeRecommendList.destroyItemEditor();
            timeRecommendList.dataProvider.itemUpdated(timeRecommendList.editedItemRenderer);
        }

        private function languageChangeHandler(event:Event):void {
            model.doLocalization(languageBox.selectedItem.value)
        }

        private var loadedFile:File;

        private function fileClickHandler(event:Event):void {
            loadedFile = new File();
            var fileFilter:FileFilter = new FileFilter("Sound", "*.mp3");
            loadedFile.browseForOpen("Open mp3 file", [fileFilter]);
            loadedFile.addEventListener(Event.SELECT, fileSelected);
        }

        private function fileSelected(event:Event):void {
            var audiofile = File.applicationStorageDirectory.resolvePath(SoundModel.mp3SoundName);
            loadedFile.copyTo(audiofile, true);
            fileBrowseButton.label = loadedFile.name;
        }

        private function closeHandler(event:Event):void {
            model.trayIt.settingsShown = false;
        }
        ]]></fx:Script>
    <s:VGroup width="100%" height="100%">
        <mx:TabNavigator width="100%" height="100%" creationPolicy="all">

            <mx:VBox width="100%" height="100%" label="{resourceManager.getString('resources', 'POMODORO_TITLE')}"
                     paddingLeft="10">
                <s:CheckBox id="countPoms" label="{resourceManager.getString('resources', 'COUNT_POMS')}"></s:CheckBox>
                <mx:HBox width="100%" verticalAlign="middle">
                    <s:CheckBox id="usePomLength" height="100%"
                                label="{resourceManager.getString('resources', 'USE_POM_LENGTH')}"></s:CheckBox>
                    <s:TextInput id="pomodoroLength" height="100%" enabled="{usePomLength.selected}" text="25"
                                 width="25" maxChars="2"
                                 restrict="0-9"/>
                </mx:HBox>
                <s:CheckBox id="resetCheckBox" label="{resourceManager.getString('resources', 'RESET_DAY')}"/>
            </mx:VBox>

            <mx:VBox width="100%" height="100%" paddingLeft="10"
                     label="{resourceManager.getString('resources', 'TIME_TEMPLATES')}">
                <s:VGroup>
                    <s:HGroup verticalAlign="middle">
                        <s:Label text="{resourceManager.getString('resources', 'TIME_TEMPLATE')} 1"/>
                        <s:TextInput id="template1" width="25" restrict="0-9"/>
                    </s:HGroup>
                    <s:HGroup verticalAlign="middle">
                        <s:Label text="{resourceManager.getString('resources', 'TIME_TEMPLATE')} 2"/>
                        <s:TextInput id="template2" width="25" restrict="0-9"/>
                    </s:HGroup>
                    <s:HGroup verticalAlign="middle">
                        <s:Label text="{resourceManager.getString('resources', 'TIME_TEMPLATE')} 3"/>
                        <s:TextInput id="template3" width="25" restrict="0-9"/>
                    </s:HGroup>
                    <s:HGroup verticalAlign="middle">
                        <s:Label text="{resourceManager.getString('resources', 'TIME_TEMPLATE')} 4"/>
                        <s:TextInput id="template4" width="25" restrict="0-9"/>
                    </s:HGroup>
                </s:VGroup>
            </mx:VBox>

            <mx:VBox width="100%" height="100%" paddingLeft="10"
                     label="{resourceManager.getString('resources', 'RECOMMEND')}"
                     verticalScrollPolicy="off">
                    <s:CheckBox id="useRecommendsCheckBox"
                                label="{resourceManager.getString('resources', 'USE_RECOMMENDS')}"/>
                    <s:CheckBox id="cycleRecommendsCheckBox"
                                label="{resourceManager.getString('resources', 'CYCLE_RECOMMENDS')}"/>
                <mx:HBox width="100%">
                    <mx:List id="timeRecommendList" width="80" height="100%"
                             itemEditor="views.renderer.CustomListItemEditor"
                             itemRenderer="views.renderer.CustomListItemRenderer"
                             editable="true"
                             rowCount="3"
                             variableRowHeight="false"
                             itemEditEnd="editEndHandler(event)">
                    </mx:List>
                    <s:Button id="addButton" width="35" label="{resourceManager.getString('resources', 'ADD')}"
                              click="addTime(event)"/>

                </mx:HBox>
            </mx:VBox>

            <mx:VBox width="100%" height="100" paddingLeft="10"
                     label="{resourceManager.getString('resources', 'OTHER')}"
                     verticalScrollPolicy="off">
                <mx:HBox width="100%" verticalAlign="middle">
                    <s:Label text="{resourceManager.getString('resources', 'LANGUAGE')}:" verticalAlign="middle"/>
                    <mx:ComboBox id="languageBox" labelField="label"
                                 dataProvider="{[{label:'English',value:MindTimerModel.EN_US},{label:'Русский',value:MindTimerModel.RU_RU}]}"
                                 change="languageChangeHandler(event)"/>
                </mx:HBox>
                <mx:HRule width="90%"/>
                <mx:VBox width="100%">
                    <s:CheckBox label="{resourceManager.getString('resources', 'USE_MP3')}" id="useMp3CheckBox"/>
                    <s:Button id="fileBrowseButton" click="fileClickHandler(event)" maxWidth="150"
                              label="{resourceManager.getString('resources', 'SELECT_FILE')}"
                              enabled="{useMp3CheckBox.selected}"/>
                </mx:VBox>
            </mx:VBox>
        </mx:TabNavigator>
        <s:HGroup width="100%" verticalAlign="middle" horizontalAlign="center">
            <mx:Button click="okHandler(event)" label="{resourceManager.getString('resources', 'OK')}"/>
            <mx:Button click="cancelHandler(event)" label="{resourceManager.getString('resources', 'CANCEL')}"/>
        </s:HGroup>
    </s:VGroup>
</s:Window>
<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the first button in a Spark ButtonBar component.

 @see spark.components.ButtonBar
 @see spark.components.ButtonBarButton

 @langversion 3.0
 @playerversion Flash 10
 @playerversion AIR 1.5
 @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
                 minHeight="21" width="45"
                   alpha.disabled="0.5">

  <!-- host component -->
  <fx:Metadata>
    <![CDATA[
    /**
     * @copy spark.skins.spark.ApplicationSkin#hostComponent
     */
    [HostComponent("spark.components.ButtonBarButton")]
    ]]>
    </fx:Metadata>

  <fx:Script fb:purpose="styling">
      import views.skins.SkinUtil;

      /* Define the skin elements that should not be colorized.
     For toggle button, the graphics are colorized but the label is not. */
    static private const exclusions:Array = ["labelDisplay"];

    /**
     * @private
     */
    override public function get colorizeExclusions():Array {return exclusions;}

    /**
     * @private
     */
    override protected function initializationComplete():void
    {
      useChromeColor = true;
      super.initializationComplete();
    }

    /**
     * @private
     */
    override protected function updateDisplayList(unscaledWidth:Number, unscaleHeight:Number):void
    {
      var cr:Number = getStyle("cornerRadius");

      if (cornerRadius != cr)
      {
        cornerRadius = cr;
        fill.topLeftRadiusX = cornerRadius;
        fill.bottomLeftRadiusX = cornerRadius;
        border.topLeftRadiusX = cornerRadius;
        border.bottomLeftRadiusX = cornerRadius;
      }

      super.updateDisplayList(unscaledWidth, unscaledHeight);
    }

    private var cornerRadius:Number = 2;
  </fx:Script>

  <!-- states -->
  <s:states>
    <s:State name="up" />
    <s:State name="over" stateGroups="overStates" />
    <s:State name="down" stateGroups="downStates" />
    <s:State name="disabled" stateGroups="disabledStates" />
    <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
    <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
    <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
    <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
  </s:states>

  <s:Group left="-1" right="0" top="-1" bottom="-1">

    <!-- layer 2: fill -->
    <!--- @private -->
    <s:Rect id="fill" left="2" right="1" top="2" bottom="2" topLeftRadiusX="2" bottomLeftRadiusX="2">
      <s:fill>
        <s:LinearGradient rotation="90">
          <s:GradientEntry color="{SkinUtil.gradient1}"
                           color.selectedUpStates="0xBBBDBD"
                           color.overStates="0x282828"
                           color.downStates="0x393939"
                           alpha="0.85"

                           alpha.overAndSelected="1" />
          <s:GradientEntry color="{SkinUtil.gradient2}"
                           color.selectedUpStates="0x9FA0A1"
                           color.over="0x282828"
                           color.overAndSelected="0x8E8F90"
                           color.downStates="0x393939"
                           alpha="0.85"

                           alpha.overAndSelected="1" />
        </s:LinearGradient>
      </s:fill>
    </s:Rect>

    <!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
    <!--- @private -->
    <s:Rect id="border" left="1" right="0" top="1" bottom="1" topLeftRadiusX="2" bottomLeftRadiusX="2" >
      <s:stroke>
        <s:LinearGradientStroke rotation="90" weight="1">
            <s:GradientEntry color="0xFFFFFF"
                             alpha="0.5625"
                             alpha.down="0.6375"/>
            <s:GradientEntry color="0x000000"
                             alpha="0.75"
                             alpha.down="0.85"/>
        </s:LinearGradientStroke>
      </s:stroke>
    </s:Rect>
  </s:Group>

  <!-- layer 8: text -->
  <!---  @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
  <s:Label id="labelDisplay"
           color="white"
           textAlign="center"
           verticalAlign="middle"
           maxDisplayedLines="1"
           horizontalCenter="0" verticalCenter="1"
           left="10" right="10" top="2" bottom="2">
  </s:Label>

</s:SparkButtonSkin>
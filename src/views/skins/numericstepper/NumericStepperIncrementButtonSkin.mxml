<?xml version="1.0" encoding="utf-8"?>

<!--
    
    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.
    
    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the up button of a Spark NumericStepper component.

 @see spark.components.NumericStepper

 @langversion 3.0
 @playerversion Flash 10
 @playerversion AIR 1.5
 @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009">

  <fx:Metadata>
        <![CDATA[
    /**
     * @copy spark.skins.spark.ApplicationSkin#hostComponent
     */
    [HostComponent("spark.components.Button")]
    ]]>
    </fx:Metadata>

  <fx:Script fb:purpose="styling">
    import views.skins.SkinUtil;

    /* Define the skin elements that should not be colorized.
     For NumericStepper buttons, the graphics are colorized but the arrow is not. */
    static private const exclusions:Array = ["arrow"];

    /**
     * @private
     */
    override public function get colorizeExclusions():Array {return exclusions;}

    /* Define the symbol fill items that should be colored by the "symbolColor" style. */
    static private const symbols:Array = ["arrowFill"];

    /**
     *  @private
     */
    override public function get symbolItems():Array {return symbols};

    /**
     * @private
     */
    override protected function initializationComplete():void
    {
      useChromeColor = true;
      super.initializationComplete();
    }

    /**
     *  @private
     */
    override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
    {
      var cr:Number = getStyle("cornerRadius");

      if (cornerRadius != cr)
      {
        cornerRadius = cr;
        fill.topRightRadiusX = cornerRadius;
      }

      super.updateDisplayList(unscaledWidth, unscaledHeight);
    }

    private var cornerRadius:Number = 2;
  </fx:Script>

  <s:states>
    <s:State name="up" />
    <s:State name="over"/>
    <s:State name="down" />
    <s:State name="disabled" />
  </s:states>

  <s:Group left="0" top="0" right="0" bottom="0">

    <!-- border/fill -->
    <!--- @private -->
    <s:Rect id="fill" left="0" top="0" right="0" bottom="0" width="18" height="16" topRightRadiusX="2">
      <s:stroke>
        <s:SolidColorStroke color="0x686868" weight="1"/>
      </s:stroke>
      <s:fill>
        <s:LinearGradient rotation="90">
          <s:GradientEntry color="{SkinUtil.gradient1}"
                           color.over="{SkinUtil.overColor}"
                           color.down="{SkinUtil.downColor}" />
          <s:GradientEntry color="{SkinUtil.gradient2}"
                           color.over="{SkinUtil.overColor}"
                           color.down="{SkinUtil.downColor}" />
        </s:LinearGradient>
      </s:fill>
    </s:Rect>
  </s:Group>

  <!-- arrow -->
  <!--- Defines the appearance of the up arrow. -->
  <s:Path horizontalCenter="0" verticalCenter="0" id="arrow"
          data="M 3.0 0.0 L 3.0 1.0 L 4.0 1.0 L 4.0 2.0 L 5.0 2.0 L 5.0 3.0 L 0.0 3.0 L 0.0 2.0 L 1.0 2.0 L 1.0 1.0 L 2.0 1.0 L 2.0 0.0 L 3.0 0.0">
    <s:fill>
        <s:LinearGradient>
            <s:GradientEntry id="arrowFill" color="white" alpha="1" />
        </s:LinearGradient>

    </s:fill>
  </s:Path>

    <s:Path horizontalCenter="0" verticalCenter="0" id="arrow1"
            data="M 3.0 0.0 L 3.0 1.0 L 4.0 1.0 L 4.0 2.0 L 5.0 2.0 L 5.0 3.0 L 0.0 3.0 L 0.0 2.0 L 1.0 2.0 L 1.0 1.0 L 2.0 1.0 L 2.0 0.0 L 3.0 0.0">
        <s:fill>
            <s:LinearGradient>
                <s:GradientEntry id="arrowFill1" color="white" alpha="1" />
            </s:LinearGradient>

        </s:fill>
    </s:Path>

</s:SparkSkin>
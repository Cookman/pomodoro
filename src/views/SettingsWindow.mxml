<?xml version="1.0"?>
<!--
  Created by Cookman on 03.12.2014.
-->
<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx" resizable="false"
          width="295" height="240" showStatusBar="false" isPopUp="true" alwaysInFront="true"
          title="{resourceManager.getString('resources', 'SETTINGS')}"
          maximizable="false" skinClass="views.skins.TitleWindowSkin"
          minimizable="false" systemChrome="none" titleIcon="{IconTools}"
          creationComplete="creationCompleteHandler(event)" close="closeHandler(event)"
          mouseDown="mouseDownHandler1(event)" mouseUp="mouseUpHandler1(event)">
    <fx:Script><![CDATA[
        import models.LocalStorage;
        import models.MindTimerModel;
        import models.SoundModel;

        import mx.collections.ArrayCollection;
        import mx.events.ListEvent;

        import views.renderer.CustomListItemEditor;
        import views.skins.SkinUtil;

        import vo.SettingsVO;

        [Embed(source="/assets/tools.png")]
        private var IconTools:Class;

        [Embed(source="/assets/plus.png")]
        private var IconPlus:Class;

        [Embed(source="/assets/minus.png")]
        private var IconMinus:Class;

        private var settings:SettingsVO;
        private var model:MindTimerModel = MindTimerModel.getInstance();

        protected function creationCompleteHandler(event:Event):void {
            settings = model.settings;
            if (settings) {
                usePomLength.selected = settings.useFixedPomodoroLength;
                countPoms.selected = settings.showPomodoroStatistic;
                pomodoroLength.text = settings.pomodoroLength.toString();
                template1.text = settings.templates[0];
                template2.text = settings.templates[1];
                template3.text = settings.templates[2];
                template4.text = settings.templates[3];
                useRecommendsCheckBox.selected = settings.useRecommends;
                cycleRecommendsCheckBox.selected = settings.cycleRecommends;
                timeRecommendList.dataProvider = new ArrayCollection(settings.recommends);

                for each(var item:Object in ArrayCollection(languageBox.dataProvider)) {
                    if (item.value == settings.language) {
                        languageBox.selectedItem = item;
                    }
                }
                resetCheckBox.selected = settings.resetDay;
                useMp3CheckBox.selected = settings.useMp3;
                if (settings.useMp3) {
                    fileBrowseButton.label = settings.soundFileName;
                }
                model.activateResetDay();
            }
        }


        private function mouseDownHandler1(event:Event):void {
            this.stage.nativeWindow.startMove();
        }

        private function mouseUpHandler1(event:Event):void {
            this.stage.nativeWindow.restore();
        }

        protected function okHandler(event:Event):void {
            if (settings) {
                settings.useFixedPomodoroLength = usePomLength.selected;
                settings.pomodoroLength = parseInt(pomodoroLength.text);
                settings.showPomodoroStatistic = countPoms.selected;
                settings.templates[0] = template1.text;
                settings.templates[1] = template2.text;
                settings.templates[2] = template3.text;
                settings.templates[3] = template4.text;
                settings.useRecommends = useRecommendsCheckBox.selected;
                settings.cycleRecommends = cycleRecommendsCheckBox.selected;
                settings.recommends = getRecommendProvider();
                settings.language = languageBox.selectedItem.value;
                settings.resetDay = resetCheckBox.selected;
                settings.useMp3 = useMp3CheckBox.selected;
                if (useMp3CheckBox.selected) {
                    try {
                        if (loadedFile) {
                            settings.soundFileName = loadedFile.name;
                            var audiofile:File = File.applicationStorageDirectory.resolvePath(SoundModel.mp3SoundName);
                            loadedFile.copyTo(audiofile, true);
                        }
                    }
                    catch (e:Error) {
                    }
                }
                LocalStorage.saveSettings(settings);
                model.loadSettings();
                model.trayIt.setPomodoroStatistic(model.showPomodoroStatistic);
                model.trayIt.show();
                model.trayIt.settingsShown = false;
                this.close();
            }
        }

        private function getRecommendProvider():Array {
            var result:Array = [];
            for each(var item:Object in timeRecommendList.dataProvider) {
                if (item != "0") {
                    result.push(item);
                }
            }
            return result;
        }

        protected function cancelHandler(event:Event):void {
            model.doLocalization(settings.language)
            model.trayIt.show();
            model.trayIt.settingsShown = false;
            model.trayIt.setPomodoroStatistic(model.showPomodoroStatistic);
            this.close();
        }

        protected function addTime(event:Event):void {
            timeRecommendList.dataProvider.addItem({value: "0"})
        }

        private function editEndHandler(event:ListEvent):void {
            event.preventDefault();
            event.stopImmediatePropagation();

            timeRecommendList.editedItemRenderer.data.value = CustomListItemEditor(event.currentTarget.itemEditorInstance).valueInput.text;
            timeRecommendList.destroyItemEditor();
            timeRecommendList.dataProvider.itemUpdated(timeRecommendList.editedItemRenderer);
        }

        private function languageChangeHandler(event:Event):void {
            model.doLocalization(languageBox.selectedItem.value)
        }

        private var loadedFile:File;

        private function fileClickHandler(event:Event):void {
            loadedFile = new File();
            var fileFilter:FileFilter = new FileFilter("Sound", "*.mp3");
            loadedFile.browseForOpen("Open mp3 file", [fileFilter]);
            loadedFile.addEventListener(Event.SELECT, fileSelected);
        }

        private function fileSelected(event:Event):void {

            fileBrowseButton.label = loadedFile.name;
        }

        private function closeHandler(event:Event):void {
            model.trayIt.settingsShown = false;
        }
        ]]></fx:Script>

    <s:VGroup width="100%" height="100%">
        <s:TabBar width="100%" dataProvider="{myViewStack}" skinClass="views.skins.TabBarSkin"/>

        <mx:ViewStack id="myViewStack" creationPolicy="all"
                      borderStyle="solid"
                      width="100%" height="100%">
            <mx:VBox width="100%" height="100%" color="white"
                     label="{resourceManager.getString('resources', 'POMODORO_TITLE')}"
                     paddingLeft="10" paddingTop="5">
                <s:CheckBox id="countPoms" color="white" skinClass="views.skins.CheckBoxSkin"
                            label="{resourceManager.getString('resources', 'COUNT_POMS')}"></s:CheckBox>
                <mx:HBox width="100%" verticalAlign="middle">
                    <s:CheckBox id="usePomLength" height="100%" color="white" skinClass="views.skins.CheckBoxSkin"
                                label="{resourceManager.getString('resources', 'USE_POM_LENGTH')}"></s:CheckBox>
                    <s:TextInput id="pomodoroLength" height="100%" enabled="{usePomLength.selected}" text="25"
                                 focusAlpha="0"
                                 width="25" maxChars="2" color="white" contentBackgroundColor="{SkinUtil.gradient1}"
                                 restrict="0-9"/>
                </mx:HBox>
                <s:CheckBox id="resetCheckBox" color="white"
                            label="{resourceManager.getString('resources', 'RESET_DAY')}"
                            skinClass="views.skins.CheckBoxSkin"/>
            </mx:VBox>

            <mx:VBox width="100%" height="100%" paddingLeft="10" color="white" paddingTop="5"
                     label="{resourceManager.getString('resources', 'TIME_TEMPLATES')}">
                <s:VGroup>
                    <s:HGroup verticalAlign="middle">
                        <s:Label text="{resourceManager.getString('resources', 'TIME_TEMPLATE')} 1" color="white"/>
                        <s:TextInput id="template1" width="25" restrict="0-9" color="white"
                                     contentBackgroundColor="{SkinUtil.gradient1}" focusAlpha="0"/>
                    </s:HGroup>
                    <s:HGroup verticalAlign="middle">
                        <s:Label text="{resourceManager.getString('resources', 'TIME_TEMPLATE')} 2" color="white"/>
                        <s:TextInput id="template2" width="25" restrict="0-9" color="white"
                                     contentBackgroundColor="{SkinUtil.gradient1}" focusAlpha="0"/>
                    </s:HGroup>
                    <s:HGroup verticalAlign="middle">
                        <s:Label text="{resourceManager.getString('resources', 'TIME_TEMPLATE')} 3" color="white"/>
                        <s:TextInput id="template3" width="25" restrict="0-9" color="white"
                                     contentBackgroundColor="{SkinUtil.gradient1}" focusAlpha="0"/>
                    </s:HGroup>
                    <s:HGroup verticalAlign="middle">
                        <s:Label text="{resourceManager.getString('resources', 'TIME_TEMPLATE')} 4" color="white"/>
                        <s:TextInput id="template4" width="25" restrict="0-9" color="white"
                                     contentBackgroundColor="{SkinUtil.gradient1}" focusAlpha="0"/>
                    </s:HGroup>
                </s:VGroup>

            </mx:VBox>

            <mx:VBox width="100%" height="100%" paddingLeft="10" color="white" paddingTop="5"
                     label="{resourceManager.getString('resources', 'RECOMMEND')}"
                     verticalScrollPolicy="off">
                <s:CheckBox id="useRecommendsCheckBox" color="white" skinClass="views.skins.CheckBoxSkin"
                            label="{resourceManager.getString('resources', 'USE_RECOMMENDS')}"/>
                <s:CheckBox id="cycleRecommendsCheckBox" color="white" skinClass="views.skins.CheckBoxSkin"
                            label="{resourceManager.getString('resources', 'CYCLE_RECOMMENDS')}"/>

                <mx:HBox width="100%">
                    <mx:List id="timeRecommendList" width="170" height="90"
                             itemEditor="views.renderer.CustomListItemEditor"
                             itemRenderer="views.renderer.CustomListItemRenderer"
                             editable="true"
                             color="white"
                             variableRowHeight="false"
                             styleName="list" contentBackgroundColor="{SkinUtil.gradient1}"
                             itemEditEnd="editEndHandler(event)">
                    </mx:List>
                    <s:Button id="addButton" width="35" icon="{IconPlus}"
                              color="white"
                              click="addTime(event)"/>
                </mx:HBox>
            </mx:VBox>

            <mx:VBox width="100%" height="100" paddingLeft="10" color="white" paddingTop="5"
                     label="{resourceManager.getString('resources', 'OTHER')}"
                     verticalScrollPolicy="off">
                <mx:HBox width="100%" verticalAlign="middle">
                    <s:Label text="{resourceManager.getString('resources', 'LANGUAGE')}:" verticalAlign="middle"
                             color="white"/>
                    <mx:ComboBox id="languageBox" labelField="label" width="150" height="100%"
                                 skin="views.skins.ComboBoxSkin"
                                 color="black" textSelectedColor="black" textRollOverColor="black"
                                 textInputStyleName="dropdown"
                                 dataProvider="{new ArrayCollection([{label:'English',value:MindTimerModel.EN_US},{label:'Русский',value:MindTimerModel.RU_RU}])}"
                                 change="languageChangeHandler(event)"/>
                </mx:HBox>
                <mx:VBox width="100%">
                    <s:CheckBox label="{resourceManager.getString('resources', 'USE_MP3')}" id="useMp3CheckBox"
                                skinClass="views.skins.CheckBoxSkin"/>
                    <s:Button id="fileBrowseButton" click="fileClickHandler(event)" maxWidth="250"
                              skinClass="views.skins.AdvancedButtonSkin"
                              label="{resourceManager.getString('resources', 'SELECT_FILE')}"
                              enabled="{useMp3CheckBox.selected}"/>
                </mx:VBox>
            </mx:VBox>
        </mx:ViewStack>
        <s:HGroup width="100%" height="30" verticalAlign="middle" horizontalAlign="right" paddingRight="10">
            <s:Button click="okHandler(event)" label="{resourceManager.getString('resources', 'OK')}"
                      textAlignLast="center"
                      skinClass="views.skins.SettingsButtonSkin"/>
            <s:Button click="cancelHandler(event)" label="{resourceManager.getString('resources', 'CANCEL')}"
                      textAlignLast="center"
                      skinClass="views.skins.SettingsButtonSkin"/>
        </s:HGroup>
    </s:VGroup>
</s:Window>